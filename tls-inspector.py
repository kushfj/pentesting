"""
Description:
tls-inspector connects to the URLs specified and summarised the TLS details.
The details are provided as a comma-separated list for each URL in the 
following order; URL, certificate details, 

Example:
  * python ./tls-inspector.py https://kush.id.au
  * python ./tls-inspector.py -f o365_urls.txt
"""

import ssl
import socket
import sys


# Global (module) variables


# Function definitions

def print_usage():
    """
    Prints the usage information

    Args:
      None

    Yields:
      None

    Returns:
      None
    """

    print("usage:")
    print("pythin",sys.argv[0], "<url>|-f <file> <port>")
    print("  url - the URL to inspect")
    print("  -f <file> - file to read URLs from")
    print("  <port> - port")

def get_hostname( url ):
    """
    Gets the RFC1808 (https://tools.ietf.org/html/rfc1808.html) compliant 
    hostname from the URL

    Args:
      None

    Yields:
      None

    Returns:
      String representing the hostname
    """
    # Check paramaters
    if (not url) or ("//" not in url):
      return None
    else: 
      return (url.split("//", 1)[1]).split("/", 1)[0]


def check_tls( url, port ):
    """
    Makes a TLS connection to the URL and attempts to identify the certificate 
    details

    Args:
      url - string representing the URL to connect to

    Yields:
      A TLS connection to the URL and prints connection details to stdout

    Returns:
      None
    """
    if (not url) or (not port) or (int(port) < 1) or (int(port) > 65535):
      print("error: invaid parameters")
      return None
    else:
      hostname = get_hostname( url )
      if not hostname:
        print("error: cannot get hostname")
        return None

      print("info: "+hostname+":"+port)
      host = socket.getaddrinfo(hostname, port)[0][4][0]

      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      ssl_sock = ssl.wrap_socket(socket, cert_reqs=ssl.CERT_REQUIRED)
      ssl_sock.connect((host, 443))

      try:
        cert = ssl_sock.getpeercert()

        if not cert:
          return None
        
      except ValueError as ve:
        return None
      finally:
        ssl_socket.close()
      

#
# Main entry point 
#

# Check parameters
if len(sys.argv) == 3:
  if not check_tls(sys.argv[1], sys.argv[2]):
    print("error: connection failed")
elif len(sys.argv) == 4:
  print("go through files")
else:
  print_usage()
